#!/usr/bin/python

import sys
import os
import signal
from time import sleep
import epics
from termcolor import colored
from openpyxl import load_workbook
import json

## ----------------------------------------------------------------------
## read xlsx spreadsheet
#wb = load_workbook(filename = 'Modes.xlsx')
#ws = wb['Modes A-F']

## ----------------------------------------------------------------------
## gather command line arguments, figure out destination mode
from argparse import ArgumentParser
parser = ArgumentParser(description="Move between operating modes")
parser.add_argument("-m", "--mode", dest="mode", default=None,
                    help="operating mode, MODE = (A B C D E F)")
parser.add_argument("-w", "--where", action="store_true", dest="where", default=False,
                    help="report current axis positions and exit")
parser.add_argument("-j", "--json", dest="json", default='Modes.json',
                    help="path and name of json file with motor positions")
args = parser.parse_args()

if args.mode is not None:
   args.mode = args.mode.upper()
if args.mode not in ('A', 'B', 'C', 'D', 'E', 'F', None):
    print colored("Mode must be (A B C D E F)", 'red', attrs=['bold'])
    exit()

mode = None
if args.mode is not None:
    mode = args.mode

##         col in xlsx, description
mode_data = {'A': ('E', 'Focused beam @ XAFS table, > 8 keV'),
             'B': ('G', 'Focused beam @ XAFS table, < 8 keV'),
             'C': ('I', 'Focused beam @ XAFS table, < 6 keV'),
             'D': ('K', 'Big beam @ XAFS table, > 8 keV'),
             'E': ('M', 'Big beam @ XAFS table, < 8 keV'),
             'F': ('O', 'Big beam @ XAFS table, < 6 keV')}


## to move between modes, the following axes must be changed
##
##  1. DM3 vertical
##  2. XAFS table jacks
##  3. mirror 2 jacks
##  4. mirror 3 jacks and lateral
##  5. (DM3 slits)
##  6. (DM2 foils) (?)

from BMMcontrols import BMM_Motor, MOTORDATA, GITREPO
aliases = ('dm3-y', 'xafs_tbl_yu', 'xafs_tbl_ydo', 'xafs_tbl_ydi',
           'm2-jack1', 'm2-jack2', 'm2-jack3', 
           'm3-jack1', 'm3-jack2', 'm3-jack3', 'm3-lateral-u', 'm3-lateral-d',
           'dm3-slits-t', 'dm3-slits-b', 'dm3-slits-i', 'dm3-slits-o')
motors = []
allbutbct = []
for a in aliases:
   this = BMM_Motor(a)
   motors.append(this)
   if a is 'dm3-y':
      bct = this
   else:
      allbutbct.append(this)
if mode is None:
    mode = raw_input("Which mode? ")
mode = mode.upper()

for m in motors:
   m.target = MOTORDATA[m.alias][mode]

   
## ----------------------------------------------------------------------
## some utility function
def where():
    print "   Axis                         current          target"
    print "  -------------------------------------------------------"
    for mo in motors:
        print("   %-25s %11.5f --> %11.5f" % (mo.pv.DESC, mo.pv.RBV, mo.target))
    print "\n"
        
if args.where:
    where()
    exit(0)

def handler(signum, frame):
    print '\n\nGot CTRL+C, stopping all motors'
    for mo in motors:
       mo.stop()
       mo.kill()
    print ""
    where()
    exit(0)

signal.signal(signal.SIGINT, handler)

def message(string):
    sys.stdout.write('\r')
    sys.stdout.flush()
    sys.stdout.write(string)


## ----------------------------------------------------------------------
## initial screen output
print "Reading data from %s/%s" % (GITREPO, 'Modes.json')
print "Moving to mode %s -- %s\n" % (mode, mode_data[mode][1])
where()
action = raw_input("s to start moving or q to quit ")
template = ' %5.1f | %5.1f %5.1f %5.1f | %5.1f %5.1f %5.1f | %5.1f %5.1f %5.1f %5.1f %5.1f | %5.1f %5.1f %5.1f %5.1f'

if action is not 's':
    exit(0)
else:
    rbvs = list()
    print colored('       |  XAFS table       |   Mirror 2        |   Mirror 3                    |   Slits',
                  'blue', attrs=['bold'])
    print colored('   BCT |  YU    YDO   YDI  |   YU    YDO   YDI |   YU    YDO   YDI   XU    XD  |   top  bottom  in  out',
                  'blue', attrs=['bold'])
    for mo in motors:
        rbvs.append(mo.pv.RBV)
    sys.stdout.write(template % tuple(rbvs))
    for mo in motors:
        if 'XAFS' not in mo.pvname:                  # this is an FMBO motor
            mo.enable()
        mo.pv.move(mo.target, wait=False)

    still_going = True
    while still_going:
        sleep(0.002)
        updt = list()
        for mo in motors:
            updt.append(mo.pv.RBV)
        message(template % tuple(updt))
        sleep(0.250)

        waiting     = not all([mo.pv.done_moving for mo in allbutbct])
        bct_going   = abs(bct.pv.RBV - bct.target) > 0.01
        still_going = waiting or bct_going

message(template % tuple(updt))
print '\n\nYou are now in mode %s' % mode
for mo in motors:
   mo.kill()
